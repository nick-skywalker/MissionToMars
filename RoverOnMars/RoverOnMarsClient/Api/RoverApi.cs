/* 
 * RoverOnMarsApi
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using RoverOnMarsApi.Swagger.Client;
using RoverOnMarsApi.Swagger.Model;

namespace RoverOnMarsApi.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IRoverApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RoverOnMarsApi.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>MapPlanet</returns>
        MapPlanet RoverGetMapPlanetGet ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RoverOnMarsApi.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of MapPlanet</returns>
        ApiResponse<MapPlanet> RoverGetMapPlanetGetWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RoverOnMarsApi.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Obstacle&gt;</returns>
        List<Obstacle> RoverGetObstaclesGet ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RoverOnMarsApi.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Obstacle&gt;</returns>
        ApiResponse<List<Obstacle>> RoverGetObstaclesGetWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RoverOnMarsApi.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="commands"> (optional)</param>
        /// <param name="actualDirection"> (optional)</param>
        /// <returns>MovementResult</returns>
        MovementResult RoverMoveRoverPost (Position body = null, string commands = null, DirectionEnum? actualDirection = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RoverOnMarsApi.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="commands"> (optional)</param>
        /// <param name="actualDirection"> (optional)</param>
        /// <returns>ApiResponse of MovementResult</returns>
        ApiResponse<MovementResult> RoverMoveRoverPostWithHttpInfo (Position body = null, string commands = null, DirectionEnum? actualDirection = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RoverOnMarsApi.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of MapPlanet</returns>
        System.Threading.Tasks.Task<MapPlanet> RoverGetMapPlanetGetAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RoverOnMarsApi.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (MapPlanet)</returns>
        System.Threading.Tasks.Task<ApiResponse<MapPlanet>> RoverGetMapPlanetGetAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RoverOnMarsApi.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Obstacle&gt;</returns>
        System.Threading.Tasks.Task<List<Obstacle>> RoverGetObstaclesGetAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RoverOnMarsApi.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Obstacle&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Obstacle>>> RoverGetObstaclesGetAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RoverOnMarsApi.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="commands"> (optional)</param>
        /// <param name="actualDirection"> (optional)</param>
        /// <returns>Task of MovementResult</returns>
        System.Threading.Tasks.Task<MovementResult> RoverMoveRoverPostAsync (Position body = null, string commands = null, DirectionEnum? actualDirection = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RoverOnMarsApi.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="commands"> (optional)</param>
        /// <param name="actualDirection"> (optional)</param>
        /// <returns>Task of ApiResponse (MovementResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<MovementResult>> RoverMoveRoverPostAsyncWithHttpInfo (Position body = null, string commands = null, DirectionEnum? actualDirection = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class RoverApi : IRoverApi
    {
        private RoverOnMarsApi.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RoverApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RoverApi(String basePath)
        {
            this.Configuration = new RoverOnMarsApi.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = RoverOnMarsApi.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RoverApi"/> class
        /// </summary>
        /// <returns></returns>
        public RoverApi()
        {
            this.Configuration = RoverOnMarsApi.Swagger.Client.Configuration.Default;

            ExceptionFactory = RoverOnMarsApi.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RoverApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RoverApi(RoverOnMarsApi.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = RoverOnMarsApi.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = RoverOnMarsApi.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public RoverOnMarsApi.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public RoverOnMarsApi.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="RoverOnMarsApi.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>MapPlanet</returns>
        public MapPlanet RoverGetMapPlanetGet ()
        {
             ApiResponse<MapPlanet> localVarResponse = RoverGetMapPlanetGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="RoverOnMarsApi.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of MapPlanet</returns>
        public ApiResponse< MapPlanet > RoverGetMapPlanetGetWithHttpInfo ()
        {

            var localVarPath = "/Rover/GetMapPlanet";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RoverGetMapPlanetGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MapPlanet>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MapPlanet) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MapPlanet)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="RoverOnMarsApi.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of MapPlanet</returns>
        public async System.Threading.Tasks.Task<MapPlanet> RoverGetMapPlanetGetAsync ()
        {
             ApiResponse<MapPlanet> localVarResponse = await RoverGetMapPlanetGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="RoverOnMarsApi.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (MapPlanet)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MapPlanet>> RoverGetMapPlanetGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/Rover/GetMapPlanet";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RoverGetMapPlanetGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MapPlanet>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MapPlanet) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MapPlanet)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="RoverOnMarsApi.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Obstacle&gt;</returns>
        public List<Obstacle> RoverGetObstaclesGet ()
        {
             ApiResponse<List<Obstacle>> localVarResponse = RoverGetObstaclesGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="RoverOnMarsApi.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Obstacle&gt;</returns>
        public ApiResponse< List<Obstacle> > RoverGetObstaclesGetWithHttpInfo ()
        {

            var localVarPath = "/Rover/GetObstacles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RoverGetObstaclesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Obstacle>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Obstacle>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Obstacle>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="RoverOnMarsApi.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Obstacle&gt;</returns>
        public async System.Threading.Tasks.Task<List<Obstacle>> RoverGetObstaclesGetAsync ()
        {
             ApiResponse<List<Obstacle>> localVarResponse = await RoverGetObstaclesGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="RoverOnMarsApi.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Obstacle&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Obstacle>>> RoverGetObstaclesGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/Rover/GetObstacles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RoverGetObstaclesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Obstacle>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Obstacle>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Obstacle>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="RoverOnMarsApi.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="commands"> (optional)</param>
        /// <param name="actualDirection"> (optional)</param>
        /// <returns>MovementResult</returns>
        public MovementResult RoverMoveRoverPost (Position body = null, string commands = null, DirectionEnum? actualDirection = null)
        {
             ApiResponse<MovementResult> localVarResponse = RoverMoveRoverPostWithHttpInfo(body, commands, actualDirection);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="RoverOnMarsApi.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="commands"> (optional)</param>
        /// <param name="actualDirection"> (optional)</param>
        /// <returns>ApiResponse of MovementResult</returns>
        public ApiResponse< MovementResult > RoverMoveRoverPostWithHttpInfo (Position body = null, string commands = null, DirectionEnum? actualDirection = null)
        {

            var localVarPath = "/Rover/MoveRover";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (commands != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "commands", commands)); // query parameter
            if (actualDirection != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "actualDirection", actualDirection)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RoverMoveRoverPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MovementResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MovementResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MovementResult)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="RoverOnMarsApi.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="commands"> (optional)</param>
        /// <param name="actualDirection"> (optional)</param>
        /// <returns>Task of MovementResult</returns>
        public async System.Threading.Tasks.Task<MovementResult> RoverMoveRoverPostAsync (Position body = null, string commands = null, DirectionEnum? actualDirection = null)
        {
             ApiResponse<MovementResult> localVarResponse = await RoverMoveRoverPostAsyncWithHttpInfo(body, commands, actualDirection);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="RoverOnMarsApi.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="commands"> (optional)</param>
        /// <param name="actualDirection"> (optional)</param>
        /// <returns>Task of ApiResponse (MovementResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MovementResult>> RoverMoveRoverPostAsyncWithHttpInfo (Position body = null, string commands = null, DirectionEnum? actualDirection = null)
        {

            var localVarPath = "/Rover/MoveRover";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (commands != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "commands", commands)); // query parameter
            if (actualDirection != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "actualDirection", actualDirection)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RoverMoveRoverPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MovementResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MovementResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MovementResult)));
        }

    }
}
