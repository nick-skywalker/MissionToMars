/* 
 * RoverOnMarsApi
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = RoverOnMarsApi.Swagger.Client.SwaggerDateConverter;

namespace RoverOnMarsApi.Swagger.Model
{
    /// <summary>
    /// MovementResult
    /// </summary>
    [DataContract]
        public partial class MovementResult :  IEquatable<MovementResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MovementResult" /> class.
        /// </summary>
        /// <param name="obstacle">obstacle.</param>
        /// <param name="position">position.</param>
        /// <param name="direction">direction.</param>
        /// <param name="result">result.</param>
        public MovementResult(Obstacle obstacle = default(Obstacle), Position position = default(Position), DirectionEnum direction = default(DirectionEnum), bool? result = default(bool?))
        {
            this.Obstacle = obstacle;
            this.Position = position;
            this.Direction = direction;
            this.Result = result;
        }
        
        /// <summary>
        /// Gets or Sets Obstacle
        /// </summary>
        [DataMember(Name="obstacle", EmitDefaultValue=false)]
        public Obstacle Obstacle { get; set; }

        /// <summary>
        /// Gets or Sets Position
        /// </summary>
        [DataMember(Name="position", EmitDefaultValue=false)]
        public Position Position { get; set; }

        /// <summary>
        /// Gets or Sets Direction
        /// </summary>
        [DataMember(Name="direction", EmitDefaultValue=false)]
        public DirectionEnum Direction { get; set; }

        /// <summary>
        /// Gets or Sets Result
        /// </summary>
        [DataMember(Name="result", EmitDefaultValue=false)]
        public bool? Result { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MovementResult {\n");
            sb.Append("  Obstacle: ").Append(Obstacle).Append("\n");
            sb.Append("  Position: ").Append(Position).Append("\n");
            sb.Append("  Direction: ").Append(Direction).Append("\n");
            sb.Append("  Result: ").Append(Result).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MovementResult);
        }

        /// <summary>
        /// Returns true if MovementResult instances are equal
        /// </summary>
        /// <param name="input">Instance of MovementResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MovementResult input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Obstacle == input.Obstacle ||
                    (this.Obstacle != null &&
                    this.Obstacle.Equals(input.Obstacle))
                ) && 
                (
                    this.Position == input.Position ||
                    (this.Position != null &&
                    this.Position.Equals(input.Position))
                ) && 
                (
                    this.Direction == input.Direction ||
                    (this.Direction != null &&
                    this.Direction.Equals(input.Direction))
                ) && 
                (
                    this.Result == input.Result ||
                    (this.Result != null &&
                    this.Result.Equals(input.Result))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Obstacle != null)
                    hashCode = hashCode * 59 + this.Obstacle.GetHashCode();
                if (this.Position != null)
                    hashCode = hashCode * 59 + this.Position.GetHashCode();
                if (this.Direction != null)
                    hashCode = hashCode * 59 + this.Direction.GetHashCode();
                if (this.Result != null)
                    hashCode = hashCode * 59 + this.Result.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
